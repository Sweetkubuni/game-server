package protocol

import (
	"fmt"
	"io"
	"os"

	"github.com/go-redis/redis/v7"
	"github.com/pion/webrtc/v3"
)

type WebRTC struct {
	api    *webrtc.API
	config webrtc.Configuration
}

func NewWebRTC(rdb *redis.Client) *WebRTC {
	s := webrtc.SettingEngine{}
	s.DetachDataChannels()
	return &WebRTC{
		api: webrtc.NewAPI(webrtc.WithSettingEngine(s)),
	}
}

/*
creates a new peer connection
*/
func (webRTC *WebRTC) Append(readChannel func(r io.Reader), writeChannel func(io.Writer), rawOffer string) {
	go func() {
		// Create a new RTCPeerConnection using the API object
		peerConnection, err := webRTC.api.NewPeerConnection(webRTC.config)
		if err != nil {
			panic(err)
		}
		defer func() {
			if cErr := peerConnection.Close(); cErr != nil {
				fmt.Printf("cannot close peerConnection: %v\n", cErr)
			}
		}()

		// Set the handler for Peer connection state
		// This will notify you when the peer has connected/disconnected
		peerConnection.OnConnectionStateChange(func(s webrtc.PeerConnectionState) {
			fmt.Printf("Peer Connection State has changed: %s\n", s.String())

			if s == webrtc.PeerConnectionStateFailed {
				// Wait until PeerConnection has had no network activity for 30 seconds or another failure. It may be reconnected using an ICE Restart.
				// Use webrtc.PeerConnectionStateDisconnected if you are interested in detecting faster timeout.
				// Note that the PeerConnection may come back from PeerConnectionStateDisconnected.
				fmt.Println("Peer Connection has gone to failed exiting")
				os.Exit(0)
			}
		})

		// Register data channel creation handling
		peerConnection.OnDataChannel(func(d *webrtc.DataChannel) {
			fmt.Printf("New DataChannel %s %d\n", d.Label(), d.ID())

			// Register channel opening handling
			d.OnOpen(func() {
				fmt.Printf("Data channel '%s'-'%d' open.\n", d.Label(), d.ID())

				// Detach the data channel
				raw, dErr := d.Detach()
				if dErr != nil {
					panic(dErr)
				}

				// Handle reading from the data channel
				go readChannel(raw)

				// Handle writing to the data channel
				go writeChannel(raw)
			})
		})

		// Wait for the offer to be pasted
		offer := webrtc.SessionDescription{}
		Decode(rawOffer, &offer, false)

		// Set the remote SessionDescription
		err = peerConnection.SetRemoteDescription(offer)
		if err != nil {
			panic(err)
		}

		// Create answer
		answer, err := peerConnection.CreateAnswer(nil)
		if err != nil {
			panic(err)
		}

		// Create channel that is blocked until ICE Gathering is complete
		gatherComplete := webrtc.GatheringCompletePromise(peerConnection)

		// Sets the LocalDescription, and starts our UDP listeners
		err = peerConnection.SetLocalDescription(answer)
		if err != nil {
			panic(err)
		}

		// Block until ICE Gathering is complete, disabling trickle ICE
		// we do this because we only can exchange one signaling message
		// in a production application you should exchange ICE Candidates via OnICECandidate
		<-gatherComplete

		// Output the answer in base64 so we can paste it in browser
		payload := Encode(*peerConnection.LocalDescription())
	}()
}
